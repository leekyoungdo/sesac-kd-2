<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>동적 폼 전송</title>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <!-- 아래 cdn은 axios 사용을 위한 것 -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    
    <form name="register">
        <input type="text" name="id" placeholder="ID" value="lee" pattern="^[a-z0-9]{5,}" required/>
        <input type="password" name="pw" autoComplete="off" placeholder="비밀번호">
        <input type="text" name="name" placeholder="이름" required>
        <button type="button" onclick="ajaxGet()">ajax get 전송</button>
        <button type="button" onclick="ajaxPost()">ajax post 전송</button>

        <button type="button" onclick="axiosGet()">axios get 전송</button>
        <button type="button" onclick="axiosPost()">axios Post 전송</button>


        <button type="button" onclick="fetchGet()">fetchGet 전송</button>
        <button type="button" onclick="fetchPost()">fetchPost 전송</button>


        <!-- 아래 두 줄은 일반(동기) 폼 전송 할 때 type submit -->
        <!-- <input type="submit"> -->
        <!-- <button type="submit">제출</button> -->

    </form>
    <h3 id="result"></h3>
    <script>
        function getData () {
            const form = document.forms["register"]

            if(!form.checkValidity()) { // checkValidty 폼의 유효성 검사를 해서 boolean값 반환
                form.reportValidity(); // reportValidity: 유효성 검사를 통과하지 못 한 대해 
                return false; //함수는 return을 만나면 다음것을 읽지않음
            }
            //getData라는 함수의 반환값은 총 2가지의 형태


            const data = {
                id: form.id.value,
                pw: form.pw.value,
                name: form.name.value,
            }
            return data
        }
        function ajaxGet() {
            const data = getData ()
            $.ajax({
                type: "GET", // 폼 속성 중 metsod
                url: "/ajax", // 폼 속성 중 action
                data: data,
                // url:`/ajax?id=${data.id}&pw=${data.pw}&name=${data.name}`,
                success: function (result) { // 응답을 성공적으로 받았을 경우에 대한 이벤트 핸들러
                    // 매개변수(result)에 응답이 들어옴
                    console.log(result)
                    $("#result").html(`ajax get 요청 성공 ${result.name}님 환영 합니다`)
                }
            })
        }

        function ajaxPost() {
            const data = getData ()
            $.ajax({
                type: "POST",
                url: "/ajax", 
                data: data,
                success: function (result) {                    
                    console.log(result)
                    $("#result").html(`ajax post 요청 성공 ${result.name}님 환영 합니다`)
                }
            })
        }   


        function axiosGet() {

            const data = getData ()
            //axios 함수는 promise 객체를 return
            axios({
                method: "GET",
                url:"/axios",
                params: data, // get 요청으로 데이터 보낼 때 params 사용
                //params 대신에 url에 query를 직접 작성해도 됨
            }).then((res) => {
                //서버에서 보내준 응답이 res에 담김
                console.log("res", res)
                console.log("resdata", res.data)
                const {name} = res.data

                $("#result").html(`axios get 요청 성공 ${name}님 환영 합니다`)
            })


        }
        async function axiosPost(){
            // 동적 폼 전송
            // 폼 유효성 검사도 하고 싶음.
            // 폼 유효성 검사를 input 태그의 pattern, minlegth, required등의 속성을 이용하여 하고 싶음
            // input 태그의 pattern, minlength, required 이 속성은 form의 "submit" 이 일어날 때 동작함.            // 동적 폼 전송은 form 의 "submit" 을 이용하는게 아님.
            // 따라서, javascript 코드 내에서 폼 유효성 검사를 하는 코드를 작성해야함
            // 방법 1
            // const regex = /^[a-z0-9]{5,}%/
            // regex.test(form.id.value)
            // 방법 2
            // form.checkValidty()와 form.reportValidty() 
            
            const data = getData();
            // data에 받아오는 값은 두가지 형태 중 하나
            //false | object (객체형태)
            if(!data) return;

            const res = await axios({
                method: "POST",
                url:"/axios",
                data: data, //post일 경우 데이터를 보낼떄 data //get은 params
            })

            console.log("res", res)
            console.log("res.data",res.data )
               const {name} = res.data
               $("#result").html(`axios post 요청 성공 ${res.data.name}님 환영 합니다`)
        }

        // function axiosPost() {

        //     const data = getData ()
        //     axios({
        //         method: "POST",
        //         url:"/axios",
        //         param: data,
        //     }).then((res) =>{
        //         console.log(res.data)
        //        const {name} = res.data
        //        $("#result").html(`axios post 요청 성공 ${name}님 환영 합니다`)

        //     })

        // }
            

        async function fetchGet() { // 방법 3할떄만 async 붙이기
            const data = getData();
            if(!data) return;

            // fetch(url, option 객체)
            // url -> action
            // option 객체에 method가 있음.
            // fetch는 method 기본값 get
            // fetch는 get 요청 시 데이터를 query로 만들어서 url과 함께 전송
            // const urlQurey = `id=${data.id}&name=${data.name}&pw=${data.pw}`
            
            // 윗값을 아래값으로 줄일 수 있다.
            const urlQurey = new URLSearchParams(data).toString();

            //---------------방법1(then 체이닝)------------------------------
            // fetch(`/fetch?${urlQurey}`).then(async(res)=> {
            //     console.log("원본", res)
            //     // json() 메소드를 이용해서 parsing 해야 함.
            //     // json() 은 Promise 기반
            //     // console.log(data) // Promise pending (undifined)(문제발생)
            //     return res.json();
            // }).then((res) =>{
            //     // 위에서 파싱 해서 return하고 있기 떄문에,
            //     // 이 함수의 res 는 서버에서 여러분들이 응답한 객체
            //     console.log("파싱", res)
            // })
            //---------------방법2 ( 반만 async / await)-----------------------------
            // fetch(`/fetch?${urlQurey}`).then(async(res)=> {
            //     console.log("원본", res);
            //     console.log("파싱", await res.json());
            //     // 응답을 파싱해야함.
            //     // .json(),.text(),
            // })
            // --------------방법3( async / await)-----------------------------
            const oriRes = await fetch(`/fetch?${urlQurey}`)
            const res = await oriRes.json()
            console.log(res)
        }


        function fetchPost () {
            const data = getData();
            if(!data) return

            // 원래는 기본값 사용 : application/x-www-form-urlencoded
            // 하지만, fetch post 요청 시에 기본값을 사용했을 때 동작을 안함
            // content-type을 application/json 형태로 변경
            fetch("/fetch", {
                method: "POST",
                headers : {
                    "Content-Type" : "application/json"
                },
                body: JSON.stringify (data) // stringify : data 객체를 (js) json
            }).then((res)=>{
                return res.json();
            }).then((res)=>{
                console.log(res)
                $("#result").html(`fetch get 요청 성공 ${res.name}님 환영 합니다`)

            })

        }
            
    
    
    
    </script>

</body>
</html>